stages:
  - build
  - dockerize

# Compile the software and make a tarball
build-software:
  stage: build
  image: ubuntu:20.04
  timeout: 6 hours
  script:
    - DEBIAN_FRONTEND=noninteractive apt update
    - DEBIAN_FRONTEND=noninteractive apt install -y build-essential tar docker.io
    - pwd
    - ls
    - sh ./install_deps_ubuntu.sh
    - cp config-salas.mk config.mk
    - make echo-targets
    - make install
    - make blob
  artifacts:
    paths:
      - fosshdl.tar.gz

# Make the docker image in a separate stage
# Since it's in a separate stage we can't use the "make dockerfile" target
# because that would rebuild everything (because of dependencies in the
# Makefile), so we will just invoke docker. We also want to tag specifically
# the image so it can be pushed to gitlab's container registry
dockerimages:
  stage: dockerize
  image: ubuntu:20.04
  timeout: 1 hour
  dependencies:
    - build-software
  script:
    - DEBIAN_FRONTEND=noninteractive apt update
    - DEBIAN_FRONTEND=noninteractive apt install -y make tar docker.io
    - cat ~/.docker/config.json
    - docker login \
        -u "$CI_REGISTRY_USER" \
        -p "$CI_REGISTRY_PASSWORD" \
        $CI_REGISTRY
    - docker build -t fosshdl:latest .
    - docker tag fosshdl:latest registry.gitlab.com/hgpub/fosshdl-dist/fosshdl:latest
    - docker push registry.gitlab.com/hgpub/fosshdl-dist/fosshdl:latest
