stages:
  - build
  - dockerize

# Build the software
build-software: &build_software
  stage: build
  image: $IMAGE
  timeout: 6 hours
  #rules:
  #- if: $IS_WEEKLY != "true"
  script:
    - DEBIAN_FRONTEND=noninteractive apt update
    - DEBIAN_FRONTEND=noninteractive apt install -y build-essential tar
    - sh ./scripts/install_deps_common.sh
    - sh ./scripts/install_deps_$IMAGE.sh
    - |
      if [[ "$IS_WEEKLY" == "true" ]]; then
        cp config-weekly-$USER.mk config.mk
      else
        cp config-$USER.mk config.mk
      fi
    - make install > fosshdl-$IMAGE-$USER-$CI_PIPELINE_CREATED_AT-build.log 2>&1
    - make blob
    - make echo-targets
    - echo "IS_WEEKLY:" $IS_WEEKLY
    - mv fosshdl.tar.gz fosshdl-$IMAGE-$USER-$CI_PIPELINE_CREATED_AT.tar.gz
  parallel:
    matrix:
      - USER: [salas]
        IMAGE: [ubuntu:22.04, ubuntu:24.04]
      - USER: [hgm]
        IMAGE: [ubuntu:22.04, ubuntu:24.04, debian:12, debian:13]
  artifacts:
    when: always
    paths:
      - fosshdl-$IMAGE-$USER-$CI_PIPELINE_CREATED_AT-build.log
      - fosshdl-$IMAGE-$USER-$CI_PIPELINE_CREATED_AT.tar.gz

#build-software-weekly:
#  <<: *build_software
#  image: $IMAGE
#  rules:
#    - if: $IS_WEEKLY == "true"
#  parallel:
#    matrix:
#      - USER: [salas]
#        IMAGE: [ubuntu:24.04]
#      - USER: [hgm]
#        IMAGE: [ubuntu:24.04, debian:12]

# Make the docker image in a separate stage
# Since it's in a separate stage we can't use the "make dockerfile" target
# because that would rebuild everything (because of dependencies in the
# Makefile), so we will just invoke docker. We also want to tag specifically
# the image so it can be pushed to gitlab's container registry
#
# The image has the same tag as its branch unless we are in the weekly build:
# in that case it is tagged 'weekly', but it will come from the 'master' branch
dockerimages:
  stage: dockerize
  image: docker:25
  timeout: 2 hour
  # If we add more than one possibility in the parallel:matrix, then we will
  # have to include that information into the tag
  parallel:
    matrix:
      - USER: [salas]
        IMAGE: [ubuntu:22.04]
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - |
      if [[ "$IS_WEEKLY" == "true" ]]; then
        tag=":weekly"
        echo "Hmm, we are in the weekly build: tag = $tag"
      fi
    - mv fosshdl-$IMAGE-$USER-$CI_PIPELINE_CREATED_AT.tar.gz fosshdl.tar.gz
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - |
      docker login \
        -u "$CI_REGISTRY_USER" \
        -p "$CI_REGISTRY_PASSWORD" \
        $CI_REGISTRY
    - docker push "$CI_REGISTRY_IMAGE${tag}"
