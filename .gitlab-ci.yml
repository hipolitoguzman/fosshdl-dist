stages:
  - build
  - dockerize

# Compile the software and make a tarball, for the 'salas' user
build-software-salas:
  stage: build
  image: ubuntu:22.04
  timeout: 6 hours
  script:
    - DEBIAN_FRONTEND=noninteractive apt update
    - DEBIAN_FRONTEND=noninteractive apt install -y build-essential tar
    - pwd
    - ls
    - sh ./install_deps_ubuntu.sh
    - echo "$IS_WEEKLY:" $IS_WEEKLY
    - |
      if [[ "$IS_WEEKLY" = "true" ]] then
        cp config-weekly-salas.mk config.mk
      else
        cp config-salas.mk config.mk
      fi
    - make echo-targets
    - make install
    - make blob
  artifacts:
    paths:
      - fosshdl.tar.gz

# Compile the software and make a tarball, for my local config
build-software-hgm:
  stage: build
  image: ubuntu:22.04
  timeout: 6 hours
  script:
    - DEBIAN_FRONTEND=noninteractive apt update
    - DEBIAN_FRONTEND=noninteractive apt install -y build-essential tar
    - pwd
    - ls
    - sh ./install_deps_ubuntu.sh
    - echo "$IS_WEEKLY:" $IS_WEEKLY
    - |
      if [[ "$IS_WEEKLY" = "true" ]] then
        cp config-weekly-hgm.mk config.mk
      else
        cp config-hgm.mk config.mk
      fi
    - make echo-targets
    - make install
    - make blob
    - mv fosshdl.tar.gz fosshdl-hgm.tar.gz
  artifacts:
    paths:
      - fosshdl-hgm.tar.gz

# Make the docker image in a separate stage
# Since it's in a separate stage we can't use the "make dockerfile" target
# because that would rebuild everything (because of dependencies in the
# Makefile), so we will just invoke docker. We also want to tag specifically
# the image so it can be pushed to gitlab's container registry
#
# The image has the same tag as its branch unless we are in the weekly build:
# in that case it is tagged 'weekly', but it will come from the 'master' branch
dockerimages:
  stage: dockerize
  image: docker:20.10.7
  timeout: 1 hour
  dependencies:
    - build-software-salas
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - |
      if [[ "$IS_WEEKLY" == "true" ]]; then
        tag=":weekly"
        echo "Hmm, we are in the weekly build: tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - |
      docker login \
        -u "$CI_REGISTRY_USER" \
        -p "$CI_REGISTRY_PASSWORD" \
        $CI_REGISTRY
    - docker push "$CI_REGISTRY_IMAGE${tag}"
